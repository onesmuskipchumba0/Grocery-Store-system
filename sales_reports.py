# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'inventory_reports.ui'
#
# Created by: PyQt5 UI code generator 5.15.10
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from datetime import datetime
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QMessageBox,QFileDialog
import os
import new_sales
from models import session,sales
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import matplotlib.style as style
from datetime import datetime
class Ui_Form(object):
    def __init__(self):
        # Create a QWidget instance to be used as the parent for file dialogs
        self.parent_widget = QtWidgets.QWidget()
    def exportAll(self):
        dates_list = []
        amount_list = []
        dates = session.query(sales).all()
        for date in dates:
            dates_list.append(str(date.sales_no))
            amount_list.append(float(date.totals))
        print(dates_list)
        print(amount_list)
        fig_1 = plt.figure(1)
        fig_2 = plt.figure(2)
        fig_3 = plt.figure(3)
        fig_4 = plt.figure(4)
        fig_1, ax = plt.subplots(1,1)
        ax.bar(dates_list,amount_list,width=0.5,color = '#9D00FF')
        ax.set_xlabel("Days from day one")
        ax.set_ylabel("Sales in ksh")
        ax.set_title("A Bar chart of sales from day one",fontweight="bold")
        fig_2, ax_2 = plt.subplots(1,1)
        ax_2.plot(dates_list,amount_list,color = 'g')
        ax_2.set_xlabel("Days from day one")
        ax_2.set_ylabel("Sales in ksh")
        ax_2.set_title("A Bar chart of sales from day one",fontweight="bold")
        fig_3, ax_3 = plt.subplots(1,1)
        ax_3.pie(amount_list,labels=dates_list,wedgeprops=dict(width=0.5))
        ax_3.set_title("A Donut chart of sales from day one",fontweight="bold")
        fig_4, ax_4 = plt.subplots(1,1)
        ax_4.pie(amount_list,labels=dates_list)
        ax_4.set_title("A Pie chart of sales from day one",fontweight="bold")
        directory = QFileDialog.getExistingDirectory(self.parent_widget, "Select Directory", options=QFileDialog.ShowDirsOnly)
        if directory:
                
                file_path = os.path.join(directory, f"Bar Graph({datetime.now().date()} {datetime.now().hour}-{datetime.now().minute}-{datetime.now().second}).png")
                file_path_line = os.path.join(directory, f"Line Graph({datetime.now().date()} {datetime.now().hour}-{datetime.now().minute}-{datetime.now().second}).png")
                file_path_donut = os.path.join(directory, f"Donut chart({datetime.now().date()} {datetime.now().hour}-{datetime.now().minute}-{datetime.now().second}).png")
                file_path_pie = os.path.join(directory, f"Pie Chart({datetime.now().date()} {datetime.now().hour}-{datetime.now().minute}-{datetime.now().second}).png")

            # Export the DataFrame to Excel
                try:
                        fig_1.savefig(file_path, dpi=800)
                        QMessageBox.information(self.parent_widget, "Export Successful", f"Exported to: {file_path}")
                        fig_2.savefig(file_path_line, dpi=800)
                        QMessageBox.information(self.parent_widget, "Export Successful", f"Exported to: {file_path_line}")
                        fig_3.savefig(file_path_donut, dpi=800)
                        QMessageBox.information(self.parent_widget, "Export Successful", f"Exported to: {file_path_donut}")
                        fig_4.savefig(file_path_pie, dpi=800)
                        QMessageBox.information(self.parent_widget, "Export Successful", f"Exported to: {file_path_pie}")
                        
                except Exception as e:
                        print(f"Error exporting to Excel: {e}")
                        QMessageBox.critical(self.parent_widget, "Export Error", f"Error exporting to Excel: {e}")      
    def exportBarLine(self):
        dates_list = []
        amount_list = []
        dates = session.query(sales).all()
        for date in dates:
            dates_list.append(str(date.sales_no))
            amount_list.append(float(date.totals))
        style.use('ggplot')
        fig = plt.Figure()
        fig, ax = plt.subplots(2,1)
        ax[0].bar(dates_list,amount_list,color = '#9D00FF')
        ax[0].set_xlabel("Days from day one")
        ax[0].set_ylabel("Sales in ksh")
        ax[0].set_title("A Bar graph of sales from day one",fontweight="bold")
        ax[1].plot(dates_list,amount_list,label='Amount',c='r',ls='--')
        ax[1].set_ylabel("Amount in ksh")
        ax[1].set_xlabel('Days from day one')
        ax[1].set_title('Amount of sales from day one.')
        ax[1].legend()
        plt.tight_layout()
        directory = QFileDialog.getExistingDirectory(self.parent_widget, "Select Directory", options=QFileDialog.ShowDirsOnly)
        if directory:
                
                file_path_bar = os.path.join(directory, f"Bar Graph({datetime.now().date()} {datetime.now().hour}-{datetime.now().minute}-{datetime.now().second}).png")
            # Export the DataFrame to Excel
                try:
                        plt.savefig(file_path_bar, dpi=800)
                        QMessageBox.information(self.parent_widget, "Export Successful", f"Exported to: {file_path_bar}")
                        
                except Exception as e:
                        print(f"Error exporting to Excel: {e}")
                        QMessageBox.critical(self.parent_widget, "Export Error", f"Error exporting to Excel: {e}")
          
    def viewBarLine(self):
        dates_list = []
        amount_list = []
        dates = session.query(sales).all()
        for date in dates:
            dates_list.append(str(date.sales_no))
            amount_list.append(float(date.totals))
        style.use('ggplot')
        fig = plt.Figure()
        fig, ax = plt.subplots(2,1)
        ax[0].bar(dates_list,amount_list,color = '#9D00FF')
        ax[0].set_xlabel("Days from day one")
        ax[0].set_ylabel("Sales in ksh")
        ax[0].set_title("A Bar graph of sales from day one",fontweight="bold")
        ax[1].plot(dates_list,amount_list,label='Amount',c='r',ls='--')
        ax[1].set_ylabel("Amount in ksh")
        ax[1].set_xlabel('Days from day one')
        ax[1].set_title('Amount of sales from day one.')
        ax[1].legend()
        plt.tight_layout()
        plt.show()
    def viewBarDonut(self):
        dates_list = []
        amount_list = []
        dates = session.query(sales).all()
        for date in dates:
            dates_list.append(str(date.sales_no))
            amount_list.append(float(date.totals))
        style.use('ggplot')
        fig = plt.Figure()
        fig, ax = plt.subplots(2,1)
        ax[0].bar(dates_list,amount_list,color = '#9D00FF')
        ax[0].set_xlabel("Days from day one")
        ax[0].set_ylabel("Sales in ksh")
        ax[0].set_title("A Bar graph of sales from day one",fontweight="bold")
        ax[1].pie(amount_list,labels=dates_list,wedgeprops=dict(width=0.6))
        ax[1].set_title('Amount of sales from day one.')
        plt.tight_layout()
        plt.show()
    def exportBarDonut(self):
        dates_list = []
        amount_list = []
        dates = session.query(sales).all()
        for date in dates:
            dates_list.append(str(date.sales_no))
            amount_list.append(float(date.totals))
        style.use('ggplot')
        fig = plt.Figure()
        fig, ax = plt.subplots(2,1)
        ax[0].bar(dates_list,amount_list,color = '#9D00FF')
        ax[0].set_xlabel("Days from day one")
        ax[0].set_ylabel("Sales in ksh")
        ax[0].set_title("A Bar graph of sales from day one",fontweight="bold")
        ax[1].pie(amount_list,labels=dates_list,wedgeprops=dict(width=0.6))
        ax[1].set_title('Amount of sales from day one.')
        plt.tight_layout()
        directory = QFileDialog.getExistingDirectory(self.parent_widget, "Select Directory", options=QFileDialog.ShowDirsOnly)
        if directory:
                
                file_path = os.path.join(directory, f"bar And Donut Gragh({datetime.now().date()} {datetime.now().hour}-{datetime.now().minute}-{datetime.now().second}).png")

            # Export the DataFrame to Excel
                try:
                        plt.savefig(file_path, dpi=800)
                        QMessageBox.information(self.parent_widget, "Export Successful", f"Exported to: {file_path}")
                except Exception as e:
                        QMessageBox.critical(self.parent_widget, "Export Error", f"Error exporting to Excel: {e}")               
    def viewLinePie(self):
        dates_list = []
        amount_list = []
        dates = session.query(sales).all()
        for date in dates:
            dates_list.append(str(date.sales_no))
            amount_list.append(float(date.totals))
        style.use('ggplot')
        fig = plt.Figure()
        fig, ax = plt.subplots(2,1)
        ax[0].plot(dates_list,amount_list,color = '#9D00FF')
        ax[0].set_xlabel("Days from day one")
        ax[0].set_ylabel("Sales in ksh")
        ax[0].set_title("A Bar graph of sales from day one",fontweight="bold")
        ax[1].pie(amount_list,labels=dates_list)
        ax[1].set_title('Amount of sales from day one.')
        plt.tight_layout()
        plt.show()
    def exportLinePie(self):
        dates_list = []
        amount_list = []
        dates = session.query(sales).all()
        for date in dates:
            dates_list.append(str(date.sales_no))
            amount_list.append(float(date.totals))
        style.use('ggplot')
        fig = plt.Figure()
        fig, ax = plt.subplots(2,1)
        ax[0].plot(dates_list,amount_list,color = '#9D00FF')
        ax[0].set_xlabel("Days from day one")
        ax[0].set_ylabel("Sales in ksh")
        ax[0].set_title("A Bar graph of sales from day one",fontweight="bold")
        ax[1].pie(amount_list,labels=dates_list)
        ax[1].set_title('Amount of sales from day one.')
        plt.tight_layout()
        directory = QFileDialog.getExistingDirectory(self.parent_widget, "Select Directory", options=QFileDialog.ShowDirsOnly)
        if directory:
                
                file_path = os.path.join(directory, f"Line And pie Chart({datetime.now().date()} {datetime.now().hour}-{datetime.now().minute}-{datetime.now().second}).png")

            # Export the DataFrame to Excel
                try:
                        plt.savefig(file_path, dpi=800)
                        QMessageBox.information(self.parent_widget, "Export Successful", f"Exported to: {file_path}")
                except Exception as e:
                        QMessageBox.critical(self.parent_widget, "Export Error", f"Error exporting to Excel: {e}")
    def exportToExcel(self):
           sales_no = []
           date = []
           totals =[]
           receipt_no = []
           datas = session.query(sales).all()
           for data in datas:
                  sales_no.append(data.sales_no)
                  date.append(data.date)
                  totals.append(data.totals)
                  receipt_no.append(data.recipt_no)
           df = pd.DataFrame({'Number':sales_no,'Date':date,'Totals':totals,'Receipt no':receipt_no})
           print(df)
           directory = QFileDialog.getExistingDirectory(self.parent_widget, "Select Directory", options=QFileDialog.ShowDirsOnly)

           if directory:
                file_path = os.path.join(directory, "viewSales.xlsx")

            # Export the DataFrame to Excel
                try:
                        df.to_excel(file_path, index=False)
                        print(f"Exported to: {file_path}")
                        QMessageBox.information(self.parent_widget, "Export Successful", f"Exported to: {file_path}")
                except Exception as e:
                        print(f"Error exporting to Excel: {e}")
                        QMessageBox.critical(self.parent_widget, "Export Error", f"Error exporting to Excel: {e}")

    def exportToCsv(self):
           sales_no = []
           date = []
           totals =[]
           receipt_no = []
           datas = session.query(sales).all()
           for data in datas:
                  sales_no.append(data.sales_no)
                  date.append(data.date)
                  totals.append(data.totals)
                  receipt_no.append(data.recipt_no)
           df = pd.DataFrame({'Number':sales_no,'Date':date,'Totals':totals,'Receipt no':receipt_no})
           print(df)
           directory = QFileDialog.getExistingDirectory(self.parent_widget, "Select Directory", options=QFileDialog.ShowDirsOnly)

           if directory:
                file_path = os.path.join(directory, "viewSales.csv")

            # Export the DataFrame to Excel
                try:
                        df.to_csv(file_path, index=False)
                        print(f"Exported to: {file_path}")
                        QMessageBox.information(self.parent_widget, "Export Successful", f"Exported to: {file_path}")
                except Exception as e:
                        print(f"Error exporting to Excel: {e}")
                        QMessageBox.critical(self.parent_widget, "Export Error", f"Error exporting to Excel: {e}")

    def exitApplication(self):
        import sys
        sys.exit()
    def addSales(self):
        self.window = QtWidgets.QMainWindow()
        self.ui = new_sales.Ui_Form()
        self.ui.setupUi(self.window)
        self.window.show() 
    def searchFunc(self):
         if self.search.text() == '':
                products_ = session.query(sales).all()
                self.tableWidget.setRowCount(len(products_))
                for i, parent in enumerate(products_):
                        self.tableWidget.setVerticalHeaderItem(i, QtWidgets.QTableWidgetItem(str(parent.sales_no)))
                        self.tableWidget.setItem(i, 0, QtWidgets.QTableWidgetItem(str(parent.date)))
                        self.tableWidget.setItem(i, 1, QtWidgets.QTableWidgetItem(str(parent.totals)))
                        self.tableWidget.setItem(i, 2, QtWidgets.QTableWidgetItem(str(parent.recipt_no)))
         else:
              fetched_items = session.query(sales).filter(sales.date.contains(self.search.text().upper())).all()
              self.tableWidget.setRowCount(len(fetched_items))
              for i, parent in enumerate(fetched_items):
                                self.tableWidget.setVerticalHeaderItem(i, QtWidgets.QTableWidgetItem(str(parent.sales_no)))
                                self.tableWidget.setItem(i, 0, QtWidgets.QTableWidgetItem(str(parent.date)))
                                self.tableWidget.setItem(i, 1, QtWidgets.QTableWidgetItem(str(parent.totals)))
                                self.tableWidget.setItem(i, 2, QtWidgets.QTableWidgetItem(str(parent.recipt_no)))
   
    def setupUi(self, Form):
        Form.setObjectName("Form")
        Form.resize(1850, 950)
        Form.setMinimumSize(QtCore.QSize(1850, 950))
        Form.setMaximumSize(QtCore.QSize(1850, 950))
        self.widget = QtWidgets.QWidget(Form)
        self.widget.setGeometry(QtCore.QRect(0, 0, 1851, 191))
        self.widget.setStyleSheet("background-color: rgb(0, 163, 108);")
        self.widget.setObjectName("widget")
        self.line = QtWidgets.QFrame(self.widget)
        self.line.setGeometry(QtCore.QRect(0, 60, 1851, 16))
        self.line.setFrameShape(QtWidgets.QFrame.HLine)
        self.line.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line.setObjectName("line")
        self.label = QtWidgets.QLabel(self.widget)
        self.label.setGeometry(QtCore.QRect(840, 20, 801, 41))
        self.label.setStyleSheet("font: 75 20pt \"MS Shell Dlg 2\";")
        self.label.setObjectName("label")
        self.search = QtWidgets.QLineEdit(self.widget)
        self.search.setGeometry(QtCore.QRect(10, 80, 601, 91))
        font = QtGui.QFont()
        font.setPointSize(20)
        self.search.setFont(font)
        self.search.setStyleSheet("background-color: rgb(100, 233, 134);\n"
"color: rgb(0, 0, 0);")
        self.search.setObjectName("search")
        self.search_btn = QtWidgets.QPushButton(self.widget)
        self.search_btn.setGeometry(QtCore.QRect(630, 80, 171, 81))
        self.search_btn.setStyleSheet("background-color: rgb(255, 250, 205);")
        self.search_btn.setText("")
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap("1x/search.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.search_btn.setIcon(icon)
        self.search_btn.setIconSize(QtCore.QSize(30, 30))
        self.search_btn.setObjectName("search_btn")
        self.label_2 = QtWidgets.QLabel(self.widget)
        self.label_2.setGeometry(QtCore.QRect(810, 70, 611, 61))
        self.label_2.setStyleSheet("font: 12pt \"MS Shell Dlg 2\";")
        self.label_2.setObjectName("label_2")
        self.new_sales = QtWidgets.QPushButton(self.widget)
        self.new_sales.setGeometry(QtCore.QRect(1440, 90, 221, 71))
        self.new_sales.setStyleSheet("background-color: rgb(255, 250, 205);")
        self.new_sales.setObjectName("new_sales")
        self.home_btn = QtWidgets.QPushButton(self.widget)
        self.home_btn.setGeometry(QtCore.QRect(1690, 90, 111, 71))
        self.home_btn.setStyleSheet("background-color: rgb(247, 93, 89);")
        self.home_btn.setObjectName("home_btn")
        self.label_5 = QtWidgets.QLabel(self.widget)
        self.label_5.setGeometry(QtCore.QRect(810, 140, 611, 21))
        self.label_5.setStyleSheet("font: 12pt \"MS Shell Dlg 2\";")
        self.label_5.setObjectName("label_5")
        self.date = QtWidgets.QLabel(self.widget)
        self.date.setGeometry(QtCore.QRect(1130, 140, 281, 21))
        self.date.setStyleSheet("font: 10pt \"Elephant\";")
        self.date.setObjectName("date")
        self.widget_2 = QtWidgets.QWidget(Form)
        self.widget_2.setGeometry(QtCore.QRect(20, 250, 1811, 771))
        self.widget_2.setStyleSheet("background-color: rgb(34, 206, 131);")
        self.widget_2.setObjectName("widget_2")
        self.tableWidget = QtWidgets.QTableWidget(self.widget_2)
        self.tableWidget.setGeometry(QtCore.QRect(350, 20, 891, 661))
        self.tableWidget.setStyleSheet("background-color: #FAEBD7;")
        self.tableWidget.setObjectName("tableWidget")
        self.tableWidget.setColumnCount(3)
        self.tableWidget.setRowCount(1)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setVerticalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(1, item)
        item = QtWidgets.QTableWidgetItem()
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(2, item)
        products_ = session.query(sales).all()
        self.tableWidget.setRowCount(len(products_))
        for i, parent in enumerate(products_):
                self.tableWidget.setVerticalHeaderItem(i, QtWidgets.QTableWidgetItem(str(parent.sales_no)))
                self.tableWidget.setItem(i, 0, QtWidgets.QTableWidgetItem(str(parent.date)))
                self.tableWidget.setItem(i, 1, QtWidgets.QTableWidgetItem(str(parent.totals)))
                self.tableWidget.setItem(i, 2, QtWidgets.QTableWidgetItem(str(parent.recipt_no)))
        self.line_2 = QtWidgets.QFrame(self.widget_2)
        self.line_2.setGeometry(QtCore.QRect(1343, 0, 20, 701))
        self.line_2.setFrameShape(QtWidgets.QFrame.VLine)
        self.line_2.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line_2.setObjectName("line_2")
        self.export_to_excel = QtWidgets.QPushButton(self.widget_2)
        self.export_to_excel.setGeometry(QtCore.QRect(1380, 30, 391, 71))
        self.export_to_excel.setStyleSheet("background-color: rgb(255, 250, 205);")
        self.export_to_excel.setObjectName("export_to_excel")
        self.export_to_csv = QtWidgets.QPushButton(self.widget_2)
        self.export_to_csv.setGeometry(QtCore.QRect(1380, 110, 391, 71))
        self.export_to_csv.setStyleSheet("background-color: rgb(255, 250, 205);")
        self.export_to_csv.setObjectName("export_to_csv")
        self.line_3 = QtWidgets.QFrame(self.widget_2)
        self.line_3.setGeometry(QtCore.QRect(1780, 0, 20, 701))
        self.line_3.setFrameShape(QtWidgets.QFrame.VLine)
        self.line_3.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line_3.setObjectName("line_3")
        self.line_4 = QtWidgets.QFrame(self.widget_2)
        self.line_4.setGeometry(QtCore.QRect(300, 0, 20, 701))
        self.line_4.setFrameShape(QtWidgets.QFrame.VLine)
        self.line_4.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line_4.setObjectName("line_4")
        self.textBrowser = QtWidgets.QTextBrowser(self.widget_2)
        self.textBrowser.setGeometry(QtCore.QRect(20, 70, 281, 281))
        self.textBrowser.setObjectName("textBrowser")
        self.label_3 = QtWidgets.QLabel(self.widget_2)
        self.label_3.setGeometry(QtCore.QRect(20, 30, 111, 31))
        self.label_3.setObjectName("label_3")
        self.label_4 = QtWidgets.QLabel(self.widget_2)
        self.label_4.setGeometry(QtCore.QRect(20, 380, 131, 16))
        self.label_4.setObjectName("label_4")
        self.line_5 = QtWidgets.QFrame(self.widget_2)
        self.line_5.setGeometry(QtCore.QRect(0, 360, 301, 16))
        self.line_5.setFrameShape(QtWidgets.QFrame.HLine)
        self.line_5.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line_5.setObjectName("line_5")
        self.line_6 = QtWidgets.QFrame(self.widget_2)
        self.line_6.setGeometry(QtCore.QRect(0, 10, 301, 16))
        self.line_6.setFrameShape(QtWidgets.QFrame.HLine)
        self.line_6.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line_6.setObjectName("line_6")
        self.textBrowser_2 = QtWidgets.QTextBrowser(self.widget_2)
        self.textBrowser_2.setGeometry(QtCore.QRect(10, 410, 291, 281))
        self.textBrowser_2.setObjectName("textBrowser_2")
        self.groupBox = QtWidgets.QGroupBox(self.widget_2)
        self.groupBox.setGeometry(QtCore.QRect(1360, 190, 421, 501))
        self.groupBox.setStyleSheet("background-color: rgb(100, 233, 134);")
        self.groupBox.setObjectName("groupBox")
        self.view_bar_line = QtWidgets.QPushButton(self.groupBox)
        self.view_bar_line.setGeometry(QtCore.QRect(20, 40, 391, 51))
        self.view_bar_line.setStyleSheet("background-color: rgb(255, 250, 205);")
        self.view_bar_line.setObjectName("view_bar_line")
        self.export_bar_line = QtWidgets.QPushButton(self.groupBox)
        self.export_bar_line.setGeometry(QtCore.QRect(20, 100, 391, 51))
        self.export_bar_line.setStyleSheet("background-color: rgb(255, 250, 205);")
        self.export_bar_line.setObjectName("export_bar_line")
        self.view_bar_donut = QtWidgets.QPushButton(self.groupBox)
        self.view_bar_donut.setGeometry(QtCore.QRect(20, 160, 391, 51))
        self.view_bar_donut.setStyleSheet("background-color: rgb(255, 250, 205);")
        self.view_bar_donut.setObjectName("view_bar_donut")
        self.export_bar_donut = QtWidgets.QPushButton(self.groupBox)
        self.export_bar_donut.setGeometry(QtCore.QRect(20, 220, 391, 51))
        self.export_bar_donut.setStyleSheet("background-color: rgb(255, 250, 205);")
        self.export_bar_donut.setObjectName("export_bar_donut")
        self.view_line_pie = QtWidgets.QPushButton(self.groupBox)
        self.view_line_pie.setGeometry(QtCore.QRect(20, 280, 391, 51))
        self.view_line_pie.setStyleSheet("background-color: rgb(255, 250, 205);")
        self.view_line_pie.setObjectName("view_line_pie")
        self.export_line_pie = QtWidgets.QPushButton(self.groupBox)
        self.export_line_pie.setGeometry(QtCore.QRect(20, 340, 391, 51))
        self.export_line_pie.setStyleSheet("background-color: rgb(255, 250, 205);")
        self.export_line_pie.setObjectName("export_line_pie")
        self.export_all = QtWidgets.QPushButton(self.groupBox)
        self.export_all.setGeometry(QtCore.QRect(20, 400, 391, 51))
        self.export_all.setStyleSheet("background-color: rgb(254, 216, 177);")
        self.export_all.setObjectName("export_all")

        self.retranslateUi(Form)
        self.export_bar_line.clicked.connect(self.exportBarLine)
        self.export_bar_donut.clicked.connect(self.exportBarDonut)
        self.export_line_pie.clicked.connect(self.exportLinePie)
        self.export_all.clicked.connect(self.exportAll)
        self.view_line_pie.clicked.connect(self.viewLinePie)
        self.view_bar_donut.clicked.connect(self.viewBarDonut)
        self.view_bar_line.clicked.connect(self.viewBarLine)
        self.search_btn.clicked.connect(self.searchFunc)
        self.export_to_excel.clicked.connect(self.exportToExcel)
        self.export_to_csv.clicked.connect(self.exportToCsv)
        self.new_sales.clicked.connect(self.addSales)
        self.new_sales.clicked.connect(Form.update) # type: ignore
        self.home_btn.clicked.connect(Form.close) # type: ignore
        self.export_to_excel.clicked.connect(Form.update) # type: ignore
        self.export_to_csv.clicked.connect(Form.update) # type: ignore
        QtCore.QMetaObject.connectSlotsByName(Form)

    def retranslateUi(self, Form):
        _translate = QtCore.QCoreApplication.translate
        Form.setWindowTitle(_translate("Form", "View Sales History"))
        self.label.setText(_translate("Form", "SALES REPORTS"))
        self.search.setPlaceholderText(_translate("Form", "Search..."))
        self.label_2.setText(_translate("Form", "Press the buttons shown to carry out various tasks"))
        self.new_sales.setText(_translate("Form", "NEW SALES"))
        self.home_btn.setText(_translate("Form", "HOME"))
        self.label_5.setText(_translate("Form", "This are the sales reports of"))
        self.date.setText(_translate("Form", f"{datetime.now().date()}"))
        item = self.tableWidget.horizontalHeaderItem(0)
        item.setText(_translate("Form", "Name"))
        item = self.tableWidget.horizontalHeaderItem(1)
        item.setText(_translate("Form", "Date"))
        item = self.tableWidget.horizontalHeaderItem(2)
        item.setText(_translate("Form", "Product Receipt"))
        __sortingEnabled = self.tableWidget.isSortingEnabled()
        self.tableWidget.setSortingEnabled(__sortingEnabled)
        self.export_to_excel.setText(_translate("Form", "EXPORT TO EXCEL"))
        self.export_to_csv.setText(_translate("Form", "EXPORT TO CSV"))
        self.textBrowser.setHtml(_translate("Form", "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
"<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
"p, li { white-space: pre-wrap; }\n"
"</style></head><body style=\" font-family:\'MS Shell Dlg 2\'; font-size:8pt; font-weight:400; font-style:normal;\">\n"
"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">Hi! Welcome to the dashboard. This is the place where you can view all the data concerning your store.</p>\n"
"<p style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><br /></p>\n"
"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">Every table shown can be exported to excel or csv for data analytics and visualisation. If this is the sales page, you can view your data here and also export it to excel for further editing.</p>\n"
"<p style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><br /></p>\n"
"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">The search option lets you search the store for registered data.</p>\n"
"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">Good Luck!!!</p></body></html>"))
        self.label_3.setText(_translate("Form", "A Bit of Help:"))
        self.label_4.setText(_translate("Form", "About the buttons"))
        self.textBrowser_2.setHtml(_translate("Form", "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
"<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
"p, li { white-space: pre-wrap; }\n"
"</style></head><body style=\" font-family:\'MS Shell Dlg 2\'; font-size:8pt; font-weight:400; font-style:normal;\">\n"
"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">The buttons are of most importance,</p>\n"
"<p style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><br /></p>\n"
"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">The export function as you may have guessed, Exports the data to excel.</p>\n"
"<p style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><br /></p>\n"
"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">The add item buttons shows a register page and allows you to add new items to teh inventory.</p>\n"
"<p style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><br /></p>\n"
"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">The update and delete items lets you delete items from the database or update them, Be carefull because these changes cannot be reverted.</p></body></html>"))
        self.groupBox.setTitle(_translate("Form", "Data Visualisation"))
        self.view_bar_line.setText(_translate("Form", "View Bar and Line Graph"))
        self.export_bar_line.setText(_translate("Form", "Export Bar and Line Graph"))
        self.view_bar_donut.setText(_translate("Form", "View Bar and donut charts"))
        self.export_bar_donut.setText(_translate("Form", "Export Bar and Donut Charts"))
        self.view_line_pie.setText(_translate("Form", "View Line and pie Charts"))
        self.export_line_pie.setText(_translate("Form", "Export Line and pie charts"))
        self.export_all.setText(_translate("Form", "Export All"))


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    Form = QtWidgets.QWidget()
    ui = Ui_Form()
    ui.setupUi(Form)
    Form.show()
    sys.exit(app.exec_())
